user  nginx;
worker_processes  auto;

events {
  worker_connections 1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;
  keepalive_timeout 65;

  # ===== キャッシュ領域（保存先はコンテナ内 /var/cache/nginx/api） =====
  proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=apicache:100m
                   max_size=1g inactive=60m use_temp_path=off;

  # ===== Authorization ヘッダがあるときはキャッシュしない（安全策） =====
  map $http_authorization $no_cache {
    default 0;
    "~.+"  1;
  }

  # ===== upstream =====
  upstream frontend { server frontend:3000; }
  upstream backend  { server backend:8080; keepalive 100; }
  upstream jaeger   { server jaeger:16686; }

  # ===== HTTPS サーバ =====
  server {
    listen 443 ssl;

    ssl_certificate     /da/tls/fullchain.pem;
    ssl_certificate_key /da/tls/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   HIGH:!aNULL:!MD5;

    # ヘルスチェック（任意）
    location = /health-check {
      return 200 "ok\n";
      add_header Content-Type text/plain;
    }

    # Jaeger
    location /jaeger/ {
      proxy_pass         http://jaeger;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # ===== 読み取りAPIの短命キャッシュ（例：/api/v1/products を 30秒） =====
    # ※ 認証付きは $no_cache により自動的にバイパスされます
    location = /api/v1/products {
      proxy_pass         http://backend;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $scheme;

      proxy_cache                 apicache;
      proxy_cache_bypass          $no_cache;
      proxy_no_cache              $no_cache;
      proxy_cache_key             $scheme$proxy_host$request_uri;  # クエリ含む
      proxy_cache_valid           200 30s;
      proxy_cache_valid           404 10s;
      proxy_cache_use_stale       error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_background_update on;

      add_header X-Cache $upstream_cache_status always;
    }

    # そのほかの API は通常プロキシ（必要に応じて他のlocationも追加可）
    location /api/ {
      proxy_pass         http://backend;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # フロント（それ以外）
    location / {
      proxy_pass         http://frontend;
      proxy_set_header   Host $host;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "upgrade";
    }
  }

  # ===== HTTP → HTTPS リダイレクト =====
  server {
    listen 80;
    return 301 https://$host$request_uri;
  }
}
